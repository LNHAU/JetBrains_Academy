type: edu
custom_name: One small step forÂ man...
files:
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Open Space</title>
        <link rel="stylesheet" type="text/css" href="index.css">
    </head>
    <body>
        <div class="space">
            <div class="planet-area">
                <img class="planet" src="https://stepik.org/media/attachments/lesson/452681/mars.png" alt="Mars" sizes="">
                <img class="rocket" src="https://stepik.org/media/attachments/lesson/452681/rocket.png" alt="Rocket" >
            </div>
            <div class="control-panel">
                <input type="password" name="password" placeholder="Enter password to unlock" id="pwd">
                <input type="button" value="OK" id="btn_ok">
                <div class="check-buttons">
                    <input type="checkbox" class="check-buttons_item">
                    <input type="checkbox" class="check-buttons_item">
                    <input type="checkbox" class="check-buttons_item">
                    <input type="checkbox" class="check-buttons_item">
                    <input type="checkbox" class="check-buttons_item">
                    <input type="checkbox" class="check-buttons_item">
                </div>
                <div class="levers">
                    <input type="range" class="levers_item">
                    <input type="range" class="levers_item">
                    <input type="range" class="levers_item">
                    <input type="range" class="levers_item">
                    <input type="range" class="levers_item">
                </div>
                <input type="button" value="Launch" id="btn_launch">
            </div>
        </div>
    </body>
    </html>
  learner_created: false
- name: src/index.css
  visible: true
  text: |-
    body {
        background-color: black;
    }

    .space {
        background-image: url("space.png");
        height: 100vh;
        width: 90vw;
        position: center;
        margin: 0vh 5vw 0vh 5vw;
    }

    .planet {
        position: absolute;
        bottom: -85px;
        overflow: hidden;
    }

    .rocket {
        position: absolute;
        margin: 25vh 0vw 0vh 25vw;
        -webkit-transform:rotate(45deg);
        -moz-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        -o-transform: rotate(45deg);
        transform: rotate(45deg);
    }

    .control-panel {
        background-color: orange;
        position: absolute;
        margin: 8rem 15rem 35rem 65rem;
        height: 5cm;
        width: 8.2cm;
    }

    #pwd {
        position: absolute;
        margin: 0.2rem 25rem 1rem 0.5rem;
        alignment: center;
    }

    #btn_ok {
        position: absolute;
        margin: 0.2rem 1rem 1rem 12rem;
    }

    .check-buttons {
        position: absolute;
        margin: 2rem 10rem 1rem 0.6rem;
        display: flex;
        flex-direction: row;
        height: 25px;
        width: 285px;
    }

    .check-buttons_item {
        position: center;
        padding: 1rem 0rem;
        margin: 0.3rem 1.5rem 1rem 0.6rem;
    }

    .levers {
        position: absolute;
        margin: 3.6rem 5rem 1rem 0.6rem;
        display: flex;
        flex-direction: row;
        height: 95px;
        width: 285px;
    }
    .levers_item {
        width: 80px;
        height: 8px;
        position: center;
        padding: 1rem 0rem;
        margin: 1.6rem 0rem 1rem -1.2rem;
        -webkit-transform:rotate(270deg);
        -moz-transform: rotate(270deg);
        -ms-transform: rotate(270deg);
        -o-transform: rotate(270deg);
        transform: rotate(270deg);
    }

    #btn_launch {
        position: absolute;
        margin: 10rem 10rem 1rem 5.8rem;
    }
  learner_created: false
- name: hstest/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');

    const hs = require('hs-test-web');

    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args:['--start-maximized']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        page.on('console', msg => console.log(msg.text()));

        await sleep(1000);

        let result = await hs.testPage(page,
            //#test1
            //testing structure of the page
            () => {
                let body = document.getElementsByTagName("body")[0];
                if (!(body && body.children.length === 1 &&
                    body.children[0].tagName.toLowerCase() === 'div' &&
                    body.children[0].className === 'space')
                ) return hs.wrong("There are some mismatches with suggested structure or elements naming")

                let space = body.children[0];
                if (!(space.children.length === 2 &&
                    space.children[0].tagName.toLowerCase() === 'div' && space.children[1].tagName.toLowerCase() === 'div' &&
                    ( space.children[0].className === 'planet-area' && space.children[1].className === 'control-panel' ||
                        space.children[1].className === 'planet-area' && space.children[0].className === 'control-panel'))
                ) return hs.wrong("There are some mismatches with suggested structure or elements naming on the space section level")

                let planetArea = document.getElementsByClassName('planet-area')
                if (planetArea.length === 0) {
                    return hs.wrong("Can't find element with class=\"planet-area\"");
                }
                if (!(planetArea[0].children.length === 2 &&
                    planetArea[0].children[0].tagName.toLowerCase() === 'img' &&
                    planetArea[0].children[1].tagName.toLowerCase() === 'img' && (
                        planetArea[0].children[0].className === 'planet' && planetArea[0].children[1].className === 'rocket' ||
                        planetArea[0].children[1].className === 'planet' && planetArea[0].children[0].className === 'rocket'))
                ) return hs.wrong("There are some mismatches with suggested structure or elements naming in planet-area section")

                let controlPanel = document.getElementsByClassName('control-panel');
                if (controlPanel.length === 0) {
                    return hs.wrong("Can't find element with class=\"control-panel\"");
                }
                let controlPanelInner = Array.from(controlPanel[0].children)[0]
                if (!(controlPanelInner.children.length === 5 &&
                    controlPanelInner.getElementsByTagName('input').length === 14 &&
                    controlPanelInner.getElementsByTagName('div').length === 2
                )) return hs.wrong("There are some mismatches with suggested structure or elements naming in control-panel section")

                return hs.correct()
            },
            //#test2
            //testing types of the check-buttons inputs
            () => {
                let checkBtnsDiv = document.getElementsByClassName("check-buttons");
                if (checkBtnsDiv.length === 0) {
                    return hs.wrong("Can't find element with class=\"check-buttons\"");
                }
                let checkBtns = Array.from(checkBtnsDiv[0].children);
                checkBtns.forEach( el => {
                    if (el.tagName.toLowerCase() !== 'input' || el.type.toLowerCase() !== 'checkbox') {
                        return hs.wrong('Each element in the check-buttons div should be an input with checkbox type')
                    }
                })

                return hs.correct();
            },
            //#test3
            //testing types of the levers inputs
            () => {
                let leversDiv = document.getElementsByClassName("levers");
                if (leversDiv.length === 0) {
                    return hs.wrong("Can't find element with class=\"levers\"");
                }
                let leversInputs = Array.from(leversDiv[0].children);
                leversInputs.forEach( el => {
                    if (el.tagName.toLowerCase() !== 'input' || el.type.toLowerCase() !== 'range') {
                        return hs.wrong('Each element in the levers div should be an input with range type')
                    }
                })

                return hs.correct();
            },
            //#test4
            //testing background of space
            () => {
                let space = document.getElementsByClassName("space");
                if (space.length === 0) {
                    return hs.wrong("Can't find element with class=\"space\"");
                }
                let spaceBg = window.getComputedStyle(space[0]).backgroundImage;
                if (!spaceBg) return hs.wrong("The element with class='space' should have background-image.");

                return hs.correct();
            },
            //#test5
            //testing gradient background of the panel
            () => {
                let controlDeck = document.getElementsByClassName("control-panel")
                if (controlDeck.length === 0) {
                    return hs.wrong("Can't find element with class=\"control-panel\"");
                }
                let controlDeckBgImg = window.getComputedStyle(controlDeck[0]).backgroundImage;
                if (!controlDeckBgImg.toLowerCase().includes('linear-gradient')) return hs.wrong("The element with class='control-panel' should have gradient background.");

                return hs.correct();
            },
            //#test6
            //testing positioning of check-buttons and levers
            /*display: flex;
        flex-direction: row;*/
            () => {
                let checkBtnsDiv = document.getElementsByClassName("check-buttons")[0];
                let leversDiv = document.getElementsByClassName("levers")[0];

                let checkBtnsDivStyles = window.getComputedStyle(checkBtnsDiv);
                let leversDivStyles = window.getComputedStyle(leversDiv);

                if (checkBtnsDivStyles.display.toLowerCase() !== 'flex' || leversDivStyles.display.toLowerCase() !== 'flex') {
                    return hs.wrong('Elements check-buttons and levers should have display: flex property.')
                }

                if (checkBtnsDivStyles.flexDirection.toLowerCase() !== 'row' || leversDivStyles.flexDirection.toLowerCase() !== 'row') {
                    return hs.wrong('Elements check-buttons and levers should be positioned in a row.')
                }

                return hs.correct();
            },
            //#test7
            //testing that levers positioned vertical
            () => {
                let leversDiv = document.getElementsByClassName('levers')[0];
                let levers = Array.from(leversDiv.getElementsByTagName('input'));
                levers.forEach( lever => {
                    let leverStyle = window.getComputedStyle(lever);
                    if (!leverStyle.transform) return hs.wrong("All levers should be vertical.")
                })

                return hs.correct();
            },
            //#test8
            //testing password field
            () => {
                let controlPanelInner = document.getElementsByClassName('control-panel__inner');
                if (controlPanelInner.length === 0) {
                    return hs.wrong("Can't find element with class=\"control-panel__inner\"");
                }
                for(let el of Array.from(controlPanelInner[0].children)){
                    if (el.tagName.toLowerCase() === 'input' && el.type.toLowerCase() === 'password') {
                        let styles = window.getComputedStyle(el);
                        if (styles.color && styles.border ) return  hs.correct()
                        else return hs.wrong("Password field's border and text color should be changed");
                    }
                }

                return hs.wrong("Can't find password field");
            },
            //testing the background color of the "ok" and "launch" buttons
            () => {
                let controlPanelInner = document.getElementsByClassName('control-panel__inner')[0];
                let counter = 0;
                for(let el of Array.from(controlPanelInner.children)){
                    if (el.tagName.toLowerCase() === 'input' && (el.type.toLowerCase() === 'submit' || el.type.toLowerCase() === 'button')) {
                        let styles = window.getComputedStyle(el);
                        if (styles.backgroundColor) {
                            counter++;
                        }

                    }
                }

                return counter === 2
                    ? hs.correct()
                    : hs.wrong("Can't find 2 input fields with type=button or submit with changed background");
            },
            //testing the form of the launch button
            () => {
                let controlPanelInner = document.getElementsByClassName('control-panel__inner')[0];
                for(let el of Array.from(controlPanelInner.children)){
                    if (el.tagName.toLowerCase() === 'input' && (el.type.toLowerCase() === 'submit' || el.type.toLowerCase() === 'button')) {
                        let styles = window.getComputedStyle(el);
                        if (styles.backgroundColor && styles.borderRadius) {
                            return hs.correct();
                        }
                    }
                }

                return hs.wrong("Can't find the input with type=button or submit with specified border-radius");
            }
        )

        await browser.close();
        return result;
    }

    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
feedback_link: https://hyperskill.org/projects/143/stages/773/implement#comment
status: Solved
record: 3
